/* Author: THijs */
$(document).ready(function () {
    "use strict";

    var
        $content = $('#content'),
        $header = $content.children('header'),
        $logo = $header.children('h1'),
        $desc = $header.children('p'),
        $canvas = $('<canvas id="c"></canvas>'),
        $canvasWrap = $canvas.wrap('<div id="cw" />').parent(),
        // Too long on purpose. Point table, unreadable anyway, [x,y,r]
        pts = [[18, 47, 15], [19, 47, 1], [22, 47, 3], [23, 47, 4], [17, 46, 8], [18, 46, 1], [24, 46, 2], [25, 46, 9], [15, 45, 8], [16, 45, 8], [25, 45, 3], [14, 44, 1], [26, 44, 8], [17, 43, 3], [18, 43, 11], [19, 43, 15], [20, 43, 20], [21, 43, 1], [25, 43, 0], [26, 43, 9], [27, 43, 4], [17, 42, 18], [18, 42, 16], [19, 42, 7], [20, 42, 11], [21, 42, 16], [22, 42, 13], [26, 42, 5], [27, 42, 11], [28, 42, 17], [16, 41, 11], [17, 41, 21], [18, 41, 23], [19, 41, 22], [20, 41, 19], [21, 41, 15], [22, 41, 13], [23, 41, 7], [24, 41, 1], [26, 41, 1], [27, 41, 5], [28, 41, 5], [20, 40, 18], [21, 40, 25], [22, 40, 22], [23, 40, 19], [28, 40, 4], [29, 40, 11], [10, 39, 7], [16, 39, 5], [17, 39, 19], [18, 39, 15], [19, 39, 13], [21, 39, 0], [22, 39, 1], [23, 39, 16], [24, 39, 22], [9, 38, 4], [10, 38, 1], [13, 38, 0], [16, 38, 13], [17, 38, 7], [18, 38, 18], [19, 38, 22], [20, 38, 21], [21, 38, 6], [24, 38, 1], [25, 38, 3], [30, 38, 14], [9, 37, 6], [14, 37, 9], [15, 37, 1], [19, 37, 11], [20, 37, 21], [21, 37, 13], [30, 37, 6], [8, 36, 4], [14, 36, 6], [19, 36, 7], [20, 36, 7], [21, 36, 16], [29, 36, 1], [30, 36, 8], [14, 35, 7], [15, 35, 0], [18, 35, 3], [19, 35, 5], [20, 35, 1], [21, 35, 17], [23, 35, 1], [29, 35, 1], [30, 35, 3], [31, 35, 8], [7, 34, 5], [14, 34, 2], [18, 34, 2], [19, 34, 6], [20, 34, 13], [21, 34, 21], [22, 34, 7], [29, 34, 5], [30, 34, 7], [31, 34, 20], [15, 33, 2], [18, 33, 2], [19, 33, 9], [20, 33, 17], [28, 33, 1], [29, 33, 5], [30, 33, 12], [31, 33, 21], [5, 32, 2], [9, 32, 18], [10, 32, 15], [11, 32, 8], [14, 32, 1], [18, 32, 6], [19, 32, 5], [20, 32, 4], [27, 32, 1], [28, 32, 3], [29, 32, 10], [30, 32, 14], [31, 32, 18], [5, 31, 11], [6, 31, 5], [7, 31, 2], [8, 31, 23], [9, 31, 25], [10, 31, 27], [11, 31, 20], [12, 31, 21], [13, 31, 5], [14, 31, 6], [17, 31, 3], [18, 31, 2], [19, 31, 2], [27, 31, 2], [28, 31, 3], [29, 31, 9], [30, 31, 16], [31, 31, 22], [4, 30, 6], [5, 30, 7], [6, 30, 9], [7, 30, 8], [8, 30, 5], [9, 30, 1], [10, 30, 4], [11, 30, 14], [12, 30, 27], [13, 30, 15], [14, 30, 12], [17, 30, 6], [18, 30, 5], [27, 30, 1], [28, 30, 8], [29, 30, 15], [30, 30, 17], [31, 30, 21], [4, 29, 19], [5, 29, 13], [6, 29, 23], [7, 29, 8], [8, 29, 1], [11, 29, 12], [12, 29, 25], [13, 29, 19], [14, 29, 1], [17, 29, 12], [18, 29, 3], [19, 29, 6], [20, 29, 8], [21, 29, 5], [27, 29, 2], [28, 29, 9], [29, 29, 15], [30, 29, 17], [31, 29, 22], [3, 28, 2], [4, 28, 26], [5, 28, 11], [6, 28, 22], [7, 28, 26], [8, 28, 28], [9, 28, 29], [10, 28, 29], [11, 28, 29], [12, 28, 27], [13, 28, 21], [14, 28, 4], [17, 28, 17], [18, 28, 10], [19, 28, 24], [20, 28, 19], [21, 28, 15], [22, 28, 15], [23, 28, 14], [27, 28, 2], [28, 28, 9], [29, 28, 17], [30, 28, 21], [31, 28, 21], [3, 27, 24], [4, 27, 23], [5, 27, 6], [13, 27, 1], [14, 27, 1], [15, 27, 1], [16, 27, 18], [17, 27, 23], [18, 27, 21], [19, 27, 21], [20, 27, 15], [21, 27, 6], [22, 27, 25], [23, 27, 25], [24, 27, 17], [28, 27, 7], [29, 27, 16], [30, 27, 20], [31, 27, 22], [32, 27, 10], [2, 26, 13], [3, 26, 19], [4, 26, 9], [5, 26, 1], [17, 26, 20], [18, 26, 28], [19, 26, 18], [20, 26, 0], [21, 26, 1], [22, 26, 8], [23, 26, 18], [28, 26, 8], [29, 26, 14], [30, 26, 20], [31, 26, 22], [32, 26, 4], [33, 26, 12], [3, 25, 26], [4, 25, 9], [5, 25, 0], [18, 25, 7], [19, 25, 28], [20, 25, 27], [21, 25, 3], [22, 25, 1], [23, 25, 14], [24, 25, 22], [25, 25, 4], [28, 25, 6], [29, 25, 16], [30, 25, 20], [31, 25, 17], [32, 25, 1], [3, 24, 28], [4, 24, 5], [20, 24, 15], [21, 24, 27], [22, 24, 28], [23, 24, 14], [24, 24, 13], [25, 24, 12], [26, 24, 1], [27, 24, 2], [28, 24, 9], [29, 24, 15], [30, 24, 19], [31, 24, 23], [32, 24, 7], [33, 24, 2], [2, 23, 29], [3, 23, 23], [4, 23, 2], [21, 23, 11], [22, 23, 22], [23, 23, 24], [24, 23, 24], [25, 23, 15], [26, 23, 9], [27, 23, 9], [28, 23, 13], [29, 23, 17], [30, 23, 17], [31, 23, 18], [32, 23, 16], [33, 23, 15], [2, 22, 28], [3, 22, 20], [23, 22, 2], [24, 22, 6], [25, 22, 11], [26, 22, 10], [27, 22, 9], [28, 22, 13], [29, 22, 24], [30, 22, 7], [31, 22, 1], [32, 22, 23], [33, 22, 15], [1, 21, 15], [2, 21, 29], [3, 21, 19], [23, 21, 3], [24, 21, 7], [25, 21, 8], [26, 21, 8], [27, 21, 10], [28, 21, 19], [29, 21, 29], [30, 21, 21], [31, 21, 6], [32, 21, 21], [33, 21, 15], [1, 20, 30], [2, 20, 29], [3, 20, 11], [23, 20, 4], [24, 20, 7], [25, 20, 9], [26, 20, 9], [27, 20, 9], [28, 20, 28], [29, 20, 26], [30, 20, 25], [31, 20, 22], [32, 20, 18], [33, 20, 23], [1, 19, 30], [2, 19, 29], [3, 19, 13], [23, 19, 3], [24, 19, 7], [25, 19, 11], [26, 19, 11], [27, 19, 19], [28, 19, 29], [29, 19, 25], [30, 19, 17], [32, 19, 6], [33, 19, 18], [1, 18, 30], [2, 18, 30], [3, 18, 3], [23, 18, 6], [24, 18, 7], [25, 18, 9], [26, 18, 14], [27, 18, 27], [28, 18, 29], [29, 18, 27], [30, 18, 17], [31, 18, 6], [32, 18, 19], [33, 18, 11], [0, 17, 19], [1, 17, 30], [2, 17, 30], [3, 17, 11], [23, 17, 5], [24, 17, 7], [25, 17, 16], [26, 17, 25], [27, 17, 28], [28, 17, 30], [29, 17, 30], [30, 17, 11], [31, 17, 17], [32, 17, 24], [33, 17, 15], [0, 16, 30], [1, 16, 31], [2, 16, 30], [3, 16, 24], [4, 16, 12], [5, 16, 3], [22, 16, 3], [23, 16, 7], [24, 16, 13], [25, 16, 25], [26, 16, 28], [27, 16, 29], [28, 16, 30], [29, 16, 30], [30, 16, 17], [31, 16, 8], [32, 16, 24], [0, 15, 30], [1, 15, 31], [2, 15, 31], [3, 15, 30], [4, 15, 30], [5, 15, 28], [6, 15, 26], [7, 15, 22], [8, 15, 27], [9, 15, 17], [10, 15, 17], [22, 15, 3], [23, 15, 18], [24, 15, 23], [25, 15, 26], [26, 15, 29], [27, 15, 30], [28, 15, 30], [29, 15, 30], [0, 14, 30], [1, 14, 31], [2, 14, 31], [3, 14, 31], [4, 14, 30], [5, 14, 30], [6, 14, 30], [7, 14, 29], [8, 14, 27], [9, 14, 26], [10, 14, 24], [22, 14, 13], [23, 14, 22], [24, 14, 25], [25, 14, 29], [26, 14, 29], [27, 14, 30], [28, 14, 30], [29, 14, 30], [0, 13, 14], [1, 13, 31], [2, 13, 31], [3, 13, 31], [4, 13, 31], [5, 13, 30], [6, 13, 29], [7, 13, 29], [8, 13, 29], [9, 13, 18], [10, 13, 24], [11, 13, 24], [12, 13, 20], [21, 13, 3], [22, 13, 19], [23, 13, 26], [24, 13, 27], [25, 13, 29], [26, 13, 29], [27, 13, 30], [28, 13, 30], [29, 13, 30], [1, 12, 31], [2, 12, 31], [3, 12, 31], [4, 12, 31], [5, 12, 31], [6, 12, 30], [7, 12, 28], [8, 12, 23], [9, 12, 25], [10, 12, 29], [11, 12, 26], [12, 12, 24], [13, 12, 18], [14, 12, 22], [15, 12, 24], [16, 12, 12], [21, 12, 1], [22, 12, 25], [23, 12, 28], [24, 12, 29], [25, 12, 29], [26, 12, 30], [27, 12, 30], [28, 12, 30], [29, 12, 30], [1, 11, 31], [2, 11, 31], [3, 11, 31], [4, 11, 31], [5, 11, 31], [6, 11, 31], [7, 11, 30], [8, 11, 30], [9, 11, 24], [10, 11, 26], [11, 11, 29], [12, 11, 28], [13, 11, 28], [14, 11, 28], [15, 11, 26], [16, 11, 29], [17, 11, 25], [18, 11, 18], [19, 11, 1], [21, 11, 19], [22, 11, 29], [23, 11, 29], [24, 11, 28], [25, 11, 30], [26, 11, 30], [27, 11, 30], [28, 11, 30], [1, 10, 31], [2, 10, 31], [3, 10, 31], [4, 10, 31], [5, 10, 31], [6, 10, 31], [7, 10, 30], [8, 10, 30], [9, 10, 25], [10, 10, 29], [11, 10, 28], [12, 10, 29], [13, 10, 29], [14, 10, 27], [15, 10, 29], [16, 10, 30], [17, 10, 29], [18, 10, 26], [19, 10, 18], [20, 10, 16], [21, 10, 27], [22, 10, 30], [23, 10, 30], [24, 10, 30], [25, 10, 30], [26, 10, 30], [27, 10, 30], [28, 10, 30], [1, 9, 26], [2, 9, 31], [3, 9, 31], [4, 9, 31], [5, 9, 31], [6, 9, 31], [7, 9, 29], [8, 9, 29], [9, 9, 29], [10, 9, 27], [11, 9, 29], [12, 9, 29], [13, 9, 29], [14, 9, 30], [15, 9, 27], [16, 9, 27], [17, 9, 29], [18, 9, 30], [19, 9, 30], [20, 9, 29], [21, 9, 30], [22, 9, 30], [23, 9, 30], [24, 9, 30], [25, 9, 31], [26, 9, 31], [27, 9, 30], [28, 9, 29], [2, 8, 31], [3, 8, 31], [4, 8, 31], [5, 8, 31], [6, 8, 31], [7, 8, 31], [8, 8, 30], [9, 8, 29], [10, 8, 30], [11, 8, 29], [12, 8, 29], [13, 8, 29], [14, 8, 30], [15, 8, 29], [16, 8, 29], [17, 8, 29], [18, 8, 29], [19, 8, 30], [20, 8, 31], [21, 8, 31], [22, 8, 31], [23, 8, 31], [24, 8, 31], [25, 8, 31], [26, 8, 31], [27, 8, 30], [2, 7, 6], [3, 7, 31], [4, 7, 31], [5, 7, 31], [6, 7, 31], [7, 7, 31], [8, 7, 31], [9, 7, 30], [10, 7, 30], [11, 7, 30], [12, 7, 30], [13, 7, 30], [14, 7, 30], [15, 7, 29], [16, 7, 29], [17, 7, 30], [18, 7, 30], [19, 7, 30], [20, 7, 31], [21, 7, 31], [22, 7, 31], [23, 7, 31], [24, 7, 31], [25, 7, 31], [26, 7, 30], [27, 7, 20], [3, 6, 29], [4, 6, 31], [5, 6, 31], [6, 6, 31], [7, 6, 31], [8, 6, 31], [9, 6, 31], [10, 6, 30], [11, 6, 30], [12, 6, 31], [13, 6, 31], [14, 6, 30], [15, 6, 30], [16, 6, 30], [17, 6, 31], [18, 6, 31], [19, 6, 31], [20, 6, 31], [21, 6, 31], [22, 6, 31], [23, 6, 31], [24, 6, 31], [25, 6, 31], [26, 6, 30], [4, 5, 31], [5, 5, 31], [6, 5, 31], [7, 5, 31], [8, 5, 31], [9, 5, 31], [10, 5, 31], [11, 5, 31], [12, 5, 31], [13, 5, 31], [14, 5, 30], [15, 5, 31], [16, 5, 30], [17, 5, 31], [18, 5, 31], [19, 5, 31], [20, 5, 31], [21, 5, 31], [22, 5, 31], [23, 5, 31], [24, 5, 31], [25, 5, 31], [5, 4, 31], [6, 4, 31], [7, 4, 31], [8, 4, 31], [9, 4, 31], [10, 4, 31], [11, 4, 31], [12, 4, 31], [13, 4, 31], [14, 4, 31], [15, 4, 31], [16, 4, 31], [17, 4, 31], [18, 4, 31], [19, 4, 31], [20, 4, 31], [21, 4, 31], [22, 4, 31], [23, 4, 31], [24, 4, 31], [6, 3, 31], [7, 3, 31], [8, 3, 31], [9, 3, 31], [10, 3, 31], [11, 3, 31], [12, 3, 31], [13, 3, 31], [14, 3, 31], [15, 3, 31], [16, 3, 31], [17, 3, 31], [18, 3, 31], [19, 3, 31], [20, 3, 31], [21, 3, 31], [22, 3, 31], [23, 3, 31], [24, 3, 10], [7, 2, 31], [8, 2, 31], [9, 2, 31], [10, 2, 31], [11, 2, 31], [12, 2, 31], [13, 2, 31], [14, 2, 31], [15, 2, 31], [16, 2, 31], [17, 2, 31], [18, 2, 31], [19, 2, 31], [20, 2, 31], [21, 2, 31], [22, 2, 30], [9, 1, 30], [10, 1, 31], [11, 1, 31], [12, 1, 31], [13, 1, 31], [14, 1, 31], [15, 1, 31], [16, 1, 31], [17, 1, 31], [18, 1, 31], [19, 1, 31], [11, 0, 14], [12, 0, 28], [13, 0, 29], [14, 0, 30], [15, 0, 30], [16, 0, 30], [17, 0, 11]],
        ptsl = pts.length,
        ch = $content.height(),
        logoHeight = $logo.height() + $desc.height(),
        gb = 4, // grid base
        gs = 6, // grid size
        dx = 230, // grid base
        dy = -375 + logoHeight, // grid base
        dz,
        ax,
        ay,
        az,
        dox,
        doy,
        dd,
        d,
        i,
        x,
        y,
        r,
        c,
        pt,
        clr,
        ctx,
        point,
        pointsLength,
        pointCollection,
        rb = 1, // radius base
        rs = 0.1, // radius step
        cf = 3, // color factor
        canvasHeight = 900,
        canvasWidth = 1280,
        dc = ($(window).width() - 1000) / 2; // x delta canvas

    function draw() {
        var tmpCanvas = $canvas.get(0);
        if (tmpCanvas.getContext === null) {
            return;
        }
        ctx = tmpCanvas.getContext('2d');
        ctx.clearRect(0, 0, canvasWidth, canvasHeight);
        if (pointCollection) {
            pointCollection.draw();
        }
    }

    function updateCursorDeltaX() {
        var ww = $(window).width();
        $canvasWrap.width(ww);
        dc = (ww - 1000) / 2;
        draw();
    }

    function onMove(e) {
        if (pointCollection) {
            pointCollection.mousePos.set(e.pageX - dc, e.pageY);
        }
    }

    function onTouchMove(e) {
        if (pointCollection) {
            pointCollection.mousePos.set(e.targetTouches[0].pageX, e.targetTouches[0].pageY);
        }
    }

    function initEventListeners() {
        $(window).bind('resize', updateCursorDeltaX).bind('mousemove', onMove);
        $canvas.get(0).ontouchmove = function (e) {
            e.preventDefault();
            onTouchMove(e);
        };
        $canvas.get(0).ontouchstart = function (e) {
            e.preventDefault();
        };
    }

    function update() {
        if (pointCollection) {
            pointCollection.update();
        }
    }

    function timeout() {
        draw();
        update();
        setTimeout(function () {
            timeout();
        }, 30);
    }

    function Vector(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.addX = function (x) {
            this.x += x;
        };
        this.addY = function (y) {
            this.y += y;
        };
        this.addZ = function (z) {
            this.z += z;
        };
        this.set = function (x, y, z) {
            this.x = x;
            this.y = y;
            this.z = z;
        };
    }

    function Point(x, y, z, size, colour) {
        this.colour = colour;
        this.curPos = new Vector(x, y, z);
        this.friction = 0.8;
        this.originalPos = new Vector(x, y, z);
        this.radius = size;
        this.size = size;
        this.springStrength = 0.1;
        this.targetPos = new Vector(x, y, z);
        this.velocity = new Vector(0.0, 0.0, 0.0);
        this.update = function () {
            dx = this.targetPos.x - this.curPos.x;
            ax = dx * this.springStrength;
            dy = this.targetPos.y - this.curPos.y;
            ay = dy * this.springStrength;

            this.velocity.x += ax;
            this.velocity.x *= this.friction;
            this.curPos.x += this.velocity.x;
            this.velocity.y += ay;
            this.velocity.y *= this.friction;
            this.curPos.y += this.velocity.y;

            dox = this.originalPos.x - this.curPos.x;
            doy = this.originalPos.y - this.curPos.y;
            dd = (dox * dox) + (doy * doy);
            d = Math.sqrt(dd);

            this.targetPos.z = d / 100 + 1;

            dz = this.targetPos.z - this.curPos.z;
            az = dz * this.springStrength;

            this.velocity.z += az;
            this.velocity.z *= this.friction;
            this.curPos.z += this.velocity.z;
            this.radius = this.size * this.curPos.z;
            if (this.radius < 1) {
                this.radius = 1;
            }
        };
        this.draw = function () {
            ctx.fillStyle = this.colour;
            ctx.beginPath();
            ctx.arc(this.curPos.x, this.curPos.y, this.radius, 0, Math.PI * 2, true);
            ctx.fill();
        };
    }

    function PointCollection() {
        this.mousePos = new Vector(0, 0);
        this.points = [];
        this.newPoint = function (x, y, z) {
            point = new Point(x, y, z);
            this.points.push(point);
            return point;
        };
        this.update = function () {
            pointsLength = this.points.length;
            for (i = 0; i < pointsLength; i += 1) {
                point = this.points[i];
                if (point !== null) {
                    dx = this.mousePos.x - point.curPos.x;
                    dy = this.mousePos.y - point.curPos.y;
                    dd = (dx * dx) + (dy * dy);
                    d = Math.sqrt(dd);
                    if (d < 150) {
                        point.targetPos.x = point.curPos.x - dx;
                        point.targetPos.y = point.curPos.y - dy;
                    } else {
                        point.targetPos.x = point.originalPos.x;
                        point.targetPos.y = point.originalPos.y;
                    }
                    point.update();
                }
            }
        };
        this.draw = function () {
            pointsLength = this.points.length;
            for (i = 0; i < pointsLength; i += 1) {
                point = this.points[i];
                if (point !== null) {
                    point.draw();
                }
            }
        };
    }

    function initPointCollection() {
        pointCollection = new PointCollection();
        pointCollection.points = [];
        updateCursorDeltaX();

        for (i = 0; i < ptsl; i += 1) {
            x = (gb + gs * pts[i][0]) + dx;
            y = (gb + gs * pts[i][1]) + dy;
            r = rb + rs * pts[i][2];
            c = cf * 33 - cf * pts[i][2];
            clr = (c < 10) ? "#0" + c + "0000" : "#" + c + "0000";
            pt = new Point(x, y, 0, r, clr);
            pt.curPos.x = (canvasWidth / 2 - 180) + pt.curPos.x;
            pt.curPos.y = (canvasHeight / 2 - 65) + pt.curPos.y;
            pt.originalPos.x = (canvasWidth / 2 - 180) +
                pt.originalPos.x;
            pt.originalPos.y = (canvasHeight / 2 - 65) +
                pt.originalPos.y;
            pointCollection.points.push(pt);
        }
        initEventListeners();
        timeout();
    }

    // Search form
    // if placeholder isn't supported:
    if (!Modernizr.input.placeholder) {
        $('#s').hint();
    }

    // if canvas is supported
    if (Modernizr.canvas) {

        // Needs to happen before determining cw and ch !!!
        $('#aside').css({
            marginTop: 280 - logoHeight,
            paddingBottom: 0
        });

        $canvas.attr({
            height: canvasHeight,
            width: canvasWidth
        }).css({
            left: 0,
            top: 0,
            position: 'absolute'
        });
        $canvasWrap.css({
            height: 10,
            left: '50%',
            marginLeft: -500,
            position: 'absolute',
            width: 1000
        }).wrap('<div id="cww" />').parent().css({
            height: ch,
            position: 'absolute',
            left: 0,
            top: 0,
            minWidth: 1000,
            width: $(window).width(),
            overflow: 'hidden'
        });
        $canvasWrap.insertBefore($content);

        initPointCollection();
    }
});
